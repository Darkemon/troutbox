// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Darkemon/troutbox"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSender creates a new instance of MockSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSender {
	mock := &MockSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSender is an autogenerated mock type for the Sender type
type MockSender struct {
	mock.Mock
}

type MockSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSender) EXPECT() *MockSender_Expecter {
	return &MockSender_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type MockSender
func (_mock *MockSender) Send(ctx context.Context, msg []troutbox.Message) ([]troutbox.Message, error) {
	ret := _mock.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 []troutbox.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []troutbox.Message) ([]troutbox.Message, error)); ok {
		return returnFunc(ctx, msg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []troutbox.Message) []troutbox.Message); ok {
		r0 = returnFunc(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]troutbox.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []troutbox.Message) error); ok {
		r1 = returnFunc(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSender_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockSender_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx
//   - msg
func (_e *MockSender_Expecter) Send(ctx interface{}, msg interface{}) *MockSender_Send_Call {
	return &MockSender_Send_Call{Call: _e.mock.On("Send", ctx, msg)}
}

func (_c *MockSender_Send_Call) Run(run func(ctx context.Context, msg []troutbox.Message)) *MockSender_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]troutbox.Message))
	})
	return _c
}

func (_c *MockSender_Send_Call) Return(messages []troutbox.Message, err error) *MockSender_Send_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *MockSender_Send_Call) RunAndReturn(run func(ctx context.Context, msg []troutbox.Message) ([]troutbox.Message, error)) *MockSender_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageRepository creates a new instance of MockMessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageRepository {
	mock := &MockMessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMessageRepository is an autogenerated mock type for the MessageRepository type
type MockMessageRepository struct {
	mock.Mock
}

type MockMessageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageRepository) EXPECT() *MockMessageRepository_Expecter {
	return &MockMessageRepository_Expecter{mock: &_m.Mock}
}

// FetchAndLock provides a mock function for the type MockMessageRepository
func (_mock *MockMessageRepository) FetchAndLock(ctx context.Context, batchSize uint) ([]troutbox.Message, error) {
	ret := _mock.Called(ctx, batchSize)

	if len(ret) == 0 {
		panic("no return value specified for FetchAndLock")
	}

	var r0 []troutbox.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) ([]troutbox.Message, error)); ok {
		return returnFunc(ctx, batchSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) []troutbox.Message); ok {
		r0 = returnFunc(ctx, batchSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]troutbox.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = returnFunc(ctx, batchSize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMessageRepository_FetchAndLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAndLock'
type MockMessageRepository_FetchAndLock_Call struct {
	*mock.Call
}

// FetchAndLock is a helper method to define mock.On call
//   - ctx
//   - batchSize
func (_e *MockMessageRepository_Expecter) FetchAndLock(ctx interface{}, batchSize interface{}) *MockMessageRepository_FetchAndLock_Call {
	return &MockMessageRepository_FetchAndLock_Call{Call: _e.mock.On("FetchAndLock", ctx, batchSize)}
}

func (_c *MockMessageRepository_FetchAndLock_Call) Run(run func(ctx context.Context, batchSize uint)) *MockMessageRepository_FetchAndLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockMessageRepository_FetchAndLock_Call) Return(messages []troutbox.Message, err error) *MockMessageRepository_FetchAndLock_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *MockMessageRepository_FetchAndLock_Call) RunAndReturn(run func(ctx context.Context, batchSize uint) ([]troutbox.Message, error)) *MockMessageRepository_FetchAndLock_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsDead provides a mock function for the type MockMessageRepository
func (_mock *MockMessageRepository) MarkAsDead(ctx context.Context, ids []uint64) error {
	ret := _mock.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsDead")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uint64) error); ok {
		r0 = returnFunc(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageRepository_MarkAsDead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsDead'
type MockMessageRepository_MarkAsDead_Call struct {
	*mock.Call
}

// MarkAsDead is a helper method to define mock.On call
//   - ctx
//   - ids
func (_e *MockMessageRepository_Expecter) MarkAsDead(ctx interface{}, ids interface{}) *MockMessageRepository_MarkAsDead_Call {
	return &MockMessageRepository_MarkAsDead_Call{Call: _e.mock.On("MarkAsDead", ctx, ids)}
}

func (_c *MockMessageRepository_MarkAsDead_Call) Run(run func(ctx context.Context, ids []uint64)) *MockMessageRepository_MarkAsDead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint64))
	})
	return _c
}

func (_c *MockMessageRepository_MarkAsDead_Call) Return(err error) *MockMessageRepository_MarkAsDead_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageRepository_MarkAsDead_Call) RunAndReturn(run func(ctx context.Context, ids []uint64) error) *MockMessageRepository_MarkAsDead_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsSent provides a mock function for the type MockMessageRepository
func (_mock *MockMessageRepository) MarkAsSent(ctx context.Context, ids []uint64) error {
	ret := _mock.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsSent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uint64) error); ok {
		r0 = returnFunc(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageRepository_MarkAsSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsSent'
type MockMessageRepository_MarkAsSent_Call struct {
	*mock.Call
}

// MarkAsSent is a helper method to define mock.On call
//   - ctx
//   - ids
func (_e *MockMessageRepository_Expecter) MarkAsSent(ctx interface{}, ids interface{}) *MockMessageRepository_MarkAsSent_Call {
	return &MockMessageRepository_MarkAsSent_Call{Call: _e.mock.On("MarkAsSent", ctx, ids)}
}

func (_c *MockMessageRepository_MarkAsSent_Call) Run(run func(ctx context.Context, ids []uint64)) *MockMessageRepository_MarkAsSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint64))
	})
	return _c
}

func (_c *MockMessageRepository_MarkAsSent_Call) Return(err error) *MockMessageRepository_MarkAsSent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageRepository_MarkAsSent_Call) RunAndReturn(run func(ctx context.Context, ids []uint64) error) *MockMessageRepository_MarkAsSent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRetryCount provides a mock function for the type MockMessageRepository
func (_mock *MockMessageRepository) UpdateRetryCount(ctx context.Context, ids []uint64) error {
	ret := _mock.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRetryCount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uint64) error); ok {
		r0 = returnFunc(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageRepository_UpdateRetryCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRetryCount'
type MockMessageRepository_UpdateRetryCount_Call struct {
	*mock.Call
}

// UpdateRetryCount is a helper method to define mock.On call
//   - ctx
//   - ids
func (_e *MockMessageRepository_Expecter) UpdateRetryCount(ctx interface{}, ids interface{}) *MockMessageRepository_UpdateRetryCount_Call {
	return &MockMessageRepository_UpdateRetryCount_Call{Call: _e.mock.On("UpdateRetryCount", ctx, ids)}
}

func (_c *MockMessageRepository_UpdateRetryCount_Call) Run(run func(ctx context.Context, ids []uint64)) *MockMessageRepository_UpdateRetryCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint64))
	})
	return _c
}

func (_c *MockMessageRepository_UpdateRetryCount_Call) Return(err error) *MockMessageRepository_UpdateRetryCount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageRepository_UpdateRetryCount_Call) RunAndReturn(run func(ctx context.Context, ids []uint64) error) *MockMessageRepository_UpdateRetryCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionalMessageRepository creates a new instance of MockTransactionalMessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionalMessageRepository[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionalMessageRepository[T] {
	mock := &MockTransactionalMessageRepository[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransactionalMessageRepository is an autogenerated mock type for the TransactionalMessageRepository type
type MockTransactionalMessageRepository[T any] struct {
	mock.Mock
}

type MockTransactionalMessageRepository_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockTransactionalMessageRepository[T]) EXPECT() *MockTransactionalMessageRepository_Expecter[T] {
	return &MockTransactionalMessageRepository_Expecter[T]{mock: &_m.Mock}
}

// AddMessage provides a mock function for the type MockTransactionalMessageRepository
func (_mock *MockTransactionalMessageRepository[T]) AddMessage(ctx context.Context, tx T, msg troutbox.Message) error {
	ret := _mock.Called(ctx, tx, msg)

	if len(ret) == 0 {
		panic("no return value specified for AddMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, T, troutbox.Message) error); ok {
		r0 = returnFunc(ctx, tx, msg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionalMessageRepository_AddMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMessage'
type MockTransactionalMessageRepository_AddMessage_Call[T any] struct {
	*mock.Call
}

// AddMessage is a helper method to define mock.On call
//   - ctx
//   - tx
//   - msg
func (_e *MockTransactionalMessageRepository_Expecter[T]) AddMessage(ctx interface{}, tx interface{}, msg interface{}) *MockTransactionalMessageRepository_AddMessage_Call[T] {
	return &MockTransactionalMessageRepository_AddMessage_Call[T]{Call: _e.mock.On("AddMessage", ctx, tx, msg)}
}

func (_c *MockTransactionalMessageRepository_AddMessage_Call[T]) Run(run func(ctx context.Context, tx T, msg troutbox.Message)) *MockTransactionalMessageRepository_AddMessage_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T), args[2].(troutbox.Message))
	})
	return _c
}

func (_c *MockTransactionalMessageRepository_AddMessage_Call[T]) Return(err error) *MockTransactionalMessageRepository_AddMessage_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionalMessageRepository_AddMessage_Call[T]) RunAndReturn(run func(ctx context.Context, tx T, msg troutbox.Message) error) *MockTransactionalMessageRepository_AddMessage_Call[T] {
	_c.Call.Return(run)
	return _c
}

// FetchAndLock provides a mock function for the type MockTransactionalMessageRepository
func (_mock *MockTransactionalMessageRepository[T]) FetchAndLock(ctx context.Context, batchSize uint) ([]troutbox.Message, error) {
	ret := _mock.Called(ctx, batchSize)

	if len(ret) == 0 {
		panic("no return value specified for FetchAndLock")
	}

	var r0 []troutbox.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) ([]troutbox.Message, error)); ok {
		return returnFunc(ctx, batchSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) []troutbox.Message); ok {
		r0 = returnFunc(ctx, batchSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]troutbox.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = returnFunc(ctx, batchSize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionalMessageRepository_FetchAndLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAndLock'
type MockTransactionalMessageRepository_FetchAndLock_Call[T any] struct {
	*mock.Call
}

// FetchAndLock is a helper method to define mock.On call
//   - ctx
//   - batchSize
func (_e *MockTransactionalMessageRepository_Expecter[T]) FetchAndLock(ctx interface{}, batchSize interface{}) *MockTransactionalMessageRepository_FetchAndLock_Call[T] {
	return &MockTransactionalMessageRepository_FetchAndLock_Call[T]{Call: _e.mock.On("FetchAndLock", ctx, batchSize)}
}

func (_c *MockTransactionalMessageRepository_FetchAndLock_Call[T]) Run(run func(ctx context.Context, batchSize uint)) *MockTransactionalMessageRepository_FetchAndLock_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockTransactionalMessageRepository_FetchAndLock_Call[T]) Return(messages []troutbox.Message, err error) *MockTransactionalMessageRepository_FetchAndLock_Call[T] {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *MockTransactionalMessageRepository_FetchAndLock_Call[T]) RunAndReturn(run func(ctx context.Context, batchSize uint) ([]troutbox.Message, error)) *MockTransactionalMessageRepository_FetchAndLock_Call[T] {
	_c.Call.Return(run)
	return _c
}

// MarkAsDead provides a mock function for the type MockTransactionalMessageRepository
func (_mock *MockTransactionalMessageRepository[T]) MarkAsDead(ctx context.Context, ids []uint64) error {
	ret := _mock.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsDead")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uint64) error); ok {
		r0 = returnFunc(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionalMessageRepository_MarkAsDead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsDead'
type MockTransactionalMessageRepository_MarkAsDead_Call[T any] struct {
	*mock.Call
}

// MarkAsDead is a helper method to define mock.On call
//   - ctx
//   - ids
func (_e *MockTransactionalMessageRepository_Expecter[T]) MarkAsDead(ctx interface{}, ids interface{}) *MockTransactionalMessageRepository_MarkAsDead_Call[T] {
	return &MockTransactionalMessageRepository_MarkAsDead_Call[T]{Call: _e.mock.On("MarkAsDead", ctx, ids)}
}

func (_c *MockTransactionalMessageRepository_MarkAsDead_Call[T]) Run(run func(ctx context.Context, ids []uint64)) *MockTransactionalMessageRepository_MarkAsDead_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint64))
	})
	return _c
}

func (_c *MockTransactionalMessageRepository_MarkAsDead_Call[T]) Return(err error) *MockTransactionalMessageRepository_MarkAsDead_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionalMessageRepository_MarkAsDead_Call[T]) RunAndReturn(run func(ctx context.Context, ids []uint64) error) *MockTransactionalMessageRepository_MarkAsDead_Call[T] {
	_c.Call.Return(run)
	return _c
}

// MarkAsSent provides a mock function for the type MockTransactionalMessageRepository
func (_mock *MockTransactionalMessageRepository[T]) MarkAsSent(ctx context.Context, ids []uint64) error {
	ret := _mock.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsSent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uint64) error); ok {
		r0 = returnFunc(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionalMessageRepository_MarkAsSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsSent'
type MockTransactionalMessageRepository_MarkAsSent_Call[T any] struct {
	*mock.Call
}

// MarkAsSent is a helper method to define mock.On call
//   - ctx
//   - ids
func (_e *MockTransactionalMessageRepository_Expecter[T]) MarkAsSent(ctx interface{}, ids interface{}) *MockTransactionalMessageRepository_MarkAsSent_Call[T] {
	return &MockTransactionalMessageRepository_MarkAsSent_Call[T]{Call: _e.mock.On("MarkAsSent", ctx, ids)}
}

func (_c *MockTransactionalMessageRepository_MarkAsSent_Call[T]) Run(run func(ctx context.Context, ids []uint64)) *MockTransactionalMessageRepository_MarkAsSent_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint64))
	})
	return _c
}

func (_c *MockTransactionalMessageRepository_MarkAsSent_Call[T]) Return(err error) *MockTransactionalMessageRepository_MarkAsSent_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionalMessageRepository_MarkAsSent_Call[T]) RunAndReturn(run func(ctx context.Context, ids []uint64) error) *MockTransactionalMessageRepository_MarkAsSent_Call[T] {
	_c.Call.Return(run)
	return _c
}

// UpdateRetryCount provides a mock function for the type MockTransactionalMessageRepository
func (_mock *MockTransactionalMessageRepository[T]) UpdateRetryCount(ctx context.Context, ids []uint64) error {
	ret := _mock.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRetryCount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uint64) error); ok {
		r0 = returnFunc(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionalMessageRepository_UpdateRetryCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRetryCount'
type MockTransactionalMessageRepository_UpdateRetryCount_Call[T any] struct {
	*mock.Call
}

// UpdateRetryCount is a helper method to define mock.On call
//   - ctx
//   - ids
func (_e *MockTransactionalMessageRepository_Expecter[T]) UpdateRetryCount(ctx interface{}, ids interface{}) *MockTransactionalMessageRepository_UpdateRetryCount_Call[T] {
	return &MockTransactionalMessageRepository_UpdateRetryCount_Call[T]{Call: _e.mock.On("UpdateRetryCount", ctx, ids)}
}

func (_c *MockTransactionalMessageRepository_UpdateRetryCount_Call[T]) Run(run func(ctx context.Context, ids []uint64)) *MockTransactionalMessageRepository_UpdateRetryCount_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint64))
	})
	return _c
}

func (_c *MockTransactionalMessageRepository_UpdateRetryCount_Call[T]) Return(err error) *MockTransactionalMessageRepository_UpdateRetryCount_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionalMessageRepository_UpdateRetryCount_Call[T]) RunAndReturn(run func(ctx context.Context, ids []uint64) error) *MockTransactionalMessageRepository_UpdateRetryCount_Call[T] {
	_c.Call.Return(run)
	return _c
}

// WithTransaction provides a mock function for the type MockTransactionalMessageRepository
func (_mock *MockTransactionalMessageRepository[T]) WithTransaction(ctx context.Context, cb troutbox.InTransactionFn) error {
	ret := _mock.Called(ctx, cb)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, troutbox.InTransactionFn) error); ok {
		r0 = returnFunc(ctx, cb)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionalMessageRepository_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type MockTransactionalMessageRepository_WithTransaction_Call[T any] struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - ctx
//   - cb
func (_e *MockTransactionalMessageRepository_Expecter[T]) WithTransaction(ctx interface{}, cb interface{}) *MockTransactionalMessageRepository_WithTransaction_Call[T] {
	return &MockTransactionalMessageRepository_WithTransaction_Call[T]{Call: _e.mock.On("WithTransaction", ctx, cb)}
}

func (_c *MockTransactionalMessageRepository_WithTransaction_Call[T]) Run(run func(ctx context.Context, cb troutbox.InTransactionFn)) *MockTransactionalMessageRepository_WithTransaction_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(troutbox.InTransactionFn))
	})
	return _c
}

func (_c *MockTransactionalMessageRepository_WithTransaction_Call[T]) Return(err error) *MockTransactionalMessageRepository_WithTransaction_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionalMessageRepository_WithTransaction_Call[T]) RunAndReturn(run func(ctx context.Context, cb troutbox.InTransactionFn) error) *MockTransactionalMessageRepository_WithTransaction_Call[T] {
	_c.Call.Return(run)
	return _c
}
